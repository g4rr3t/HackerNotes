Linux user basics:
su - <username> = switches user
sudo -s = switches user to root
last = see who has or is currently logged in
adduser <username> = adds new user - doesn't create home 
passwd <username> = set new user password

SSH basics:
In root: sudo service start ssh
On remote: ssh -l username ipOfHost


--Chapter 1 Getting Started with Basics--
Linux filesystem:
/root Superuser's home dir
/boot kernel image
/etc system confi files
/home user home dirs
/mnt General purpose mount point
/proc view of internal kernel data
/sys kernel's view of HW
/dev special device files
/bin binaries
/sbin special binaries
/lib libraries
/usr/lib more libraries
/usr/sbin more binaries

whoami = current user
locate <file> = returns list of file across filesystem
whereis <bin or program> = locate for binaries/programs
which <program> = returns path of program executed in PATH variable occurance
find <dir> <options> <expression> 
ps aux = show running processes
ps aux | grep apache2 = only return processes that have apache2
cat <file> = concatenate, print file to screen
> = redirect, send contents to file, overwrites existing
>> = append contents to file
touch <file> = create empty file
mkdir <dir> = creates empty directory
cp <from path> <to path> = copy
mv <from path> <to path> = move/rename
rm <file> = removes file
rm -r <dir> = recursive delete

--Chapter 2 Text Manipulation--
head <file> = view first 10 lines
tail <file> = view last 10 lines
nl <file> = display file with line numbers
sed <from> <to> = replaces instances of from with to
less <file> = view file

--Chapter 3 Analyzing and Managing Networks--
ifconfig = show network interfaces
iwconfig = show wireless interfaces
ifconfig <interface> <IP> = changes IP
/etc/hosts = host file, maps names to IPs

--Chapter 4 Adding and Removing Software--
apt-get update = important! updates the local package list and dependencies reducing dependency hell
sudo apt-get upgrade = upgrades all packages installed and dependencies
/etc/apt/sources.list = list of repos apt-get uses
sudo apt-get install <program>
apt-get remove <program>
apt-get purge <program> = also deletes configuration files
apt autoremove <program> = removes dependencies

--Chapter 5 Controlling File and Directory Permissions--
r = read
w = write/modify
x = execute

chown <user> <file> = change ownership of file
chgrp <group> <file> = grants ownership of file to group
chmod +/- wrx, ... <file> = changes permission on file
chmod 777 <file> = sets permissino on file
Users can set umask, which subtracts from default permissions when creating new files and directories
suid = set user id = states that any user can execute the file with permissions of the owner but those
	permissions don't extent beyond the use of that file. SUID is set by prepending a 4 to representation, ie 4644
	It's also represented as an s, in place of the x when viewing file permissions
sgid = set group id = grants temporary elevated permissions of the file owner's groups, instead the file's owner.
	used for when a group shares a directory, users of the same group can execute each other's files. Represented
	by 2, ie. 2644




--Chapter 13 Becoming Secure and Anon--

Setup proxies: 
/etc/proxychains.conf
proxychains <command> <args>

Dynamic chaining - run through every IP in list - if fail is found, skipped

Random chaining - every proxychains run will appear different to target

paid proxy > free proxy

The Onion Router System (Tor) - Allows anon routing through encrpytion of IPs except past IP.  Hides routing from commercial, but probably not NSA.

Virtual Private Network - tunnels encrypted traffic to router - making traffic appear from router.  Useful for region restrictions. Requires trust in vpm provider to not share routing info 

Proton mail - secure encrypted email

--Chapter 14 Understanding and Inspecting Wireless Networks--
ifconfig - displays all network interfaces
iwconfig - displays wireless interfaces

Each wireless interface has three modes:
	managed: ready to join or has joined AP
	master: ready to acto or has acted as an AP
	monitor:

iwlist <interface> <action>
iwlist wlan0 scan - displays all APs in range

nmcli - network manager command line interface.
nmcli dev wifi - displays APs

dBm - decibles relative to milliwat
logrithmic scale.  3dB loss halves signal strength. 10dB gain increases signal strength by 10
-30 dBm = amazing - very close to AP
-67 dBm = very good - min strength needed for apps that require very reliable and timely delivery of data packets 
-70 dBm = minimum recommended Wifi signal for web browsing - mostly reliable packet delivery
-80 dBm = not good - min signal strength for basic connectivity - unreliable
-90 dBm = unusable - approaching or drowning in noise - unlikely functionality

--Chapter 15 Managing the Kernel Model and Loadable Kernel Modules (LKM)--
Device drivers are usually installed directly on the kernel
LKM - addable modules without recompiling the kernel, valuable target for hackers
rootkit - malware that embeds into kernel of OS, often through LKM, allowing complete control of OS
uname -a = check kernel version
cat /proc/version = check kernal version
sysctl tunes kernel options - permenant changes must be made at /etc/sysctl.conf
sysctl -a = hundreds of parameters used to optimize kernel
lsmod = lists installed modules
insmod = old way to insert modules
rmmod = removes modules
modinfo <modname> = gets more info on mod and lists dependencies
Modules may have dependencies, so installing separate ones may cause system to become unstable.  modprobe reduces this risk by understanding dependencies.
modprobe -a <modname> = adds module
modprobe -r <modname> = removes module
dmesg | grep video = searches kernel messages for word containing video

--Chapter 16 Automating Tasks with Job Scheduling--
crond = deamon that checks the crontab for commands to run at specified times.
crontab = located at /etc/crontab
# =identifier
m =minute (0-59)
h =hour (0-23)
dom = day of month(1-31)
mon = month (1-2 or jan, feb, mar...)
dow = day of week (0-7, sunday is 0 or 7, or sun,mon,tues...)
commas and ranges work, *=every
Shortcuts:
@yearly
@annualy
@monthly
@weekly
@daily
@midnight
@noon
@reboot
example: @midight user /bin/backup.sh

rc scripts = run at startup to setup environment
After kernal initialization and loaded modules, kernal starts a deamon called initd, 
	which runs scripts found in /etc/init.d/
	Which init script is run is determined by runlevel:
	0 Halt system
	1 Single-user minimal mode
	2 user definable
	3 full multi-user mode
	4 user definable
	5 full multi-user graphical mode x11 based
	6 Reboot
To add services to run at startup, add to rc.d script:
update <name of script or service> <remove|defaults|disable|enable>

--Chapter 17 Python Scripting Basics for Hackers--
sudo apt-get install python3-pip = installs python and default packages
pip3 show <packagename> = displays pacakge information
python3 setup.py install = installs unpacked packages that have yet to be installed
To install 3rd party packages:
	wget <url of tar.gz file>
	tar -xzf <tar.gz file>
	cd <name of tarball>
	python setup.py install








